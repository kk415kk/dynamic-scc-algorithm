------
DELETE: E' = { (A,B) in E }, G = (V,E)
------
G contains:
  - a mapping of SCC to nodes --> SCC
  - a mapping of node to SCC ---> inverse_SCC

def remove_edges(E'):
  check_scc = set()

  for (A,B) in E':
    delete (A,B) from E
    if SCC(A) == SCC(B):
      check_scc.add(SCC(A))
      delete (A,B) from A's intracomponent edges
    else:
      delete (A,B) from A's intercomponent edges

  # Go through all the SCCs that are affected
  for scc in check_edges:
    run tarjan's algorithm on the scc in question, only considering nodes/edges within the scc

--------
  ADD: E' = { (A,B) in E }, G = (V,E) 
--------




